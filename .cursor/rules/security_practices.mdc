---
description: Security best practices and standards for EGOS development
globs: ["**/*.py", "**/*.md", "**/*.js", "**/*.html"]
alwaysApply: true
---

# Security Practices (KOIOS Standard)

## Rule

All EGOS code and systems **must** adhere to these security principles:

1.  **Authentication & Authorization**
    *   Implement proper authentication for all access points (APIs, UIs).
    *   Use role-based access control (RBAC) or equivalent for authorization.
    *   Never store credentials (passwords, API keys, tokens) in code or plain text configuration files. Use environment variables, secret managers (like HashiCorp Vault, AWS Secrets Manager), or secure configuration injection.
2.  **Data Protection**
    *   Use strong encryption (e.g., AES-256) for sensitive data at rest (databases, files) and in transit (TLS 1.2+).
    *   Implement rigorous input validation for **all** user-provided data (API inputs, form data, file uploads) to prevent injection attacks (SQLi, XSS, command injection).
    *   Sanitize **all** outputs displayed to users or passed to other systems to prevent XSS and other injection vulnerabilities.
    *   Never log sensitive information (passwords, full tokens, PII) unless absolutely necessary, anonymized, and compliant with ETHIK guidelines. Mask sensitive data in logs.
    *   **Avoid `pickle`:** Never deserialize data from untrusted sources using `pickle`, as it can lead to arbitrary code execution. Prefer safer serialization formats like JSON.
3.  **Dependency Management**
    *   Use only approved, well-maintained dependencies from trusted sources.
    *   Regularly scan dependencies for known vulnerabilities (e.g., using `pip-audit`, `safety`, GitHub Dependabot).
    *   Patch vulnerable dependencies promptly.
    *   Pin dependency versions in `requirements.txt` or `pyproject.toml` to ensure reproducible builds and prevent unexpected updates (supply chain attacks).
4.  **Code Security**
    *   Follow the principle of least privilege: processes and users should only have the permissions necessary to perform their tasks.
    *   Avoid security anti-patterns (e.g., hardcoded secrets, predictable session IDs, debug flags left on in production).
    *   Implement proper error handling that does not expose sensitive internal details (stack traces, configuration paths) to users.
    *   Use cryptographically secure random number generation (`secrets` module in Python) for tokens, session IDs, etc.
5.  **Testing & Verification**
    *   Implement security-focused unit and integration tests (e.g., testing input validation, authorization logic).
    *   Run static application security testing (SAST) tools (like `bandit` for Python, linters with security rules) as part of CI.
    *   Conduct regular code reviews with a focus on potential security flaws.
    *   Consider dynamic application security testing (DAST) and penetration testing for critical components.

## Rationale

Security is a foundational aspect of the EGOS system. These practices ensure the confidentiality, integrity, and availability of data and services while protecting users and the system itself from malicious actors. Avoiding insecure deserialization methods like `pickle` with untrusted data is critical to prevent remote code execution vulnerabilities.

## Examples

### Correct Usage

```python
import os
import secrets
from typing import Dict, Optional

from cryptography.fernet import Fernet # Example encryption library
from koios.logger import KoiosLogger
from koios.validators import validate_input # Assume a validation function exists

# Example: Load sensitive key from environment variable
ENCRYPTION_KEY = os.environ.get("EGOS_ENCRYPTION_KEY")
if not ENCRYPTION_KEY:
    # Handle missing key appropriately (log error, exit, etc.)
    raise EnvironmentError("Missing required environment variable: EGOS_ENCRYPTION_KEY")
fernet_instance = Fernet(ENCRYPTION_KEY.encode())

logger = KoiosLogger.get_logger("SUBSYSTEM.SecurityModule")

def generate_secure_token() -> str:
    """Generate a secure random token."""
    return secrets.token_urlsafe(32)

def encrypt_sensitive_data(data: str) -> bytes:
    """Encrypt sensitive data using the configured key."""
    if not data:
        return b''
    return fernet_instance.encrypt(data.encode())

def decrypt_sensitive_data(token: bytes) -> str:
    """Decrypt sensitive data using the configured key."""
    if not token:
        return ''
    # Add proper error handling for decrypt failure (InvalidToken)
    try:
        return fernet_instance.decrypt(token).decode()
    except Exception as e:
        logger.error(f"Failed to decrypt token: {e}")
        # Raise a specific application error or return an indicator of failure
        raise ValueError("Invalid or corrupted token") from e

def process_validated_input(user_input: str) -> str:
    """Process user input *after* it has been validated."""
    # Assume validate_input was called before this function
    # Safely use validated_input here
    result = f"Processed: {user_input}"
    logger.info("Successfully processed validated user input")
    return result

# Example call pattern:
# raw_input = get_user_input()
# validated = validate_input(raw_input) # Raises error or returns sanitized data
# if validated:
#    output = process_validated_input(validated)
#    send_sanitized_output_to_user(output)
```

### Incorrect Usage

```python
import random
import hashlib

API_KEY = "hardcoded_secret_key_12345"  # WRONG: Hardcoded secret

def generate_api_key():  # WRONG: Uses weak random
    """Generate API key."""
    return str(random.randint(10000, 99999))  # WRONG: Not cryptographically secure

def encrypt_password(password): # WRONG: Outdated/weak hashing for passwords
    """Hash a password with MD5."""
    # Use modern password hashing like Argon2 or bcrypt instead
    return hashlib.md5(password.encode()).hexdigest()  # WRONG: MD5 is insecure for passwords

def process_user_data(user_input):
    # WRONG: No input validation - potential SQL Injection
    # WRONG: Missing type hints
    query = f"SELECT * FROM users WHERE username = '{user_input}'"

    # WRONG: Logging potentially sensitive information directly
    print(f"Executing query with user input: {user_input}")

    # WRONG: No specific error handling for database operation
    # return execute_query(query) # Placeholder
```

### Incorrect Usage (Serialization Example)

```python
import pickle
import base64

def deserialize_user_data(encoded_data: str):
    # WRONG: Deserializing directly from potentially untrusted input using pickle.
    # This allows arbitrary code execution if encoded_data is crafted maliciously.
    try:
        user_data = pickle.loads(base64.b64decode(encoded_data))
        # ... process user_data ...
        return user_data
    except Exception as e:
        # Basic error handling, but the vulnerability is in using pickle itself
        print(f"Error deserializing data: {e}")
        return None

# CORRECTED approach (using JSON, a safer format):
# import json
# def deserialize_user_data_safe(json_string: str):
#     try:
#         # Use JSON which does not execute code and is safer for untrusted data
#         user_data = json.loads(json_string)
#         # Add validation logic here for the structure/content of user_data
#         # ... process user_data ...
#         return user_data
#     except json.JSONDecodeError as e:
#         print(f"Invalid JSON data: {e}")
#         return None
#     except Exception as e:
#         print(f"Error processing safe data: {e}")
#         return None
```

**All EGOS development must adhere to these security practices to ensure the confidentiality, integrity, and availability of data and services. Security is not a feature but a foundational requirement.**
